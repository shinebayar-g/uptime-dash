// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: uptime_dash/v1/uptime.proto

package uptime_dash_v1connect

import (
	context "context"
	errors "errors"
	connect_go "github.com/bufbuild/connect-go"
	v1 "main/gen/uptime_dash/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect_go.IsAtLeastVersion0_1_0

const (
	// UptimeServiceName is the fully-qualified name of the UptimeService service.
	UptimeServiceName = "uptime_dash.v1.UptimeService"
)

// UptimeServiceClient is a client for the uptime_dash.v1.UptimeService service.
type UptimeServiceClient interface {
	GetAllTargets(context.Context, *connect_go.Request[v1.GetAllTargetsRequest]) (*connect_go.Response[v1.GetAllTargetsResponse], error)
	GetTarget(context.Context, *connect_go.Request[v1.GetTargetRequest]) (*connect_go.Response[v1.GetTargetResponse], error)
	CreateTarget(context.Context, *connect_go.Request[v1.CreateTargetRequest]) (*connect_go.Response[v1.CreateTargetResponse], error)
	UpdateTarget(context.Context, *connect_go.Request[v1.UpdateTargetRequest]) (*connect_go.Response[v1.UpdateTargetResponse], error)
	DeleteTarget(context.Context, *connect_go.Request[v1.DeleteTargetRequest]) (*connect_go.Response[v1.DeleteTargetResponse], error)
}

// NewUptimeServiceClient constructs a client for the uptime_dash.v1.UptimeService service. By
// default, it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses,
// and sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the
// connect.WithGRPC() or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewUptimeServiceClient(httpClient connect_go.HTTPClient, baseURL string, opts ...connect_go.ClientOption) UptimeServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &uptimeServiceClient{
		getAllTargets: connect_go.NewClient[v1.GetAllTargetsRequest, v1.GetAllTargetsResponse](
			httpClient,
			baseURL+"/uptime_dash.v1.UptimeService/GetAllTargets",
			opts...,
		),
		getTarget: connect_go.NewClient[v1.GetTargetRequest, v1.GetTargetResponse](
			httpClient,
			baseURL+"/uptime_dash.v1.UptimeService/GetTarget",
			opts...,
		),
		createTarget: connect_go.NewClient[v1.CreateTargetRequest, v1.CreateTargetResponse](
			httpClient,
			baseURL+"/uptime_dash.v1.UptimeService/CreateTarget",
			opts...,
		),
		updateTarget: connect_go.NewClient[v1.UpdateTargetRequest, v1.UpdateTargetResponse](
			httpClient,
			baseURL+"/uptime_dash.v1.UptimeService/UpdateTarget",
			opts...,
		),
		deleteTarget: connect_go.NewClient[v1.DeleteTargetRequest, v1.DeleteTargetResponse](
			httpClient,
			baseURL+"/uptime_dash.v1.UptimeService/DeleteTarget",
			opts...,
		),
	}
}

// uptimeServiceClient implements UptimeServiceClient.
type uptimeServiceClient struct {
	getAllTargets *connect_go.Client[v1.GetAllTargetsRequest, v1.GetAllTargetsResponse]
	getTarget     *connect_go.Client[v1.GetTargetRequest, v1.GetTargetResponse]
	createTarget  *connect_go.Client[v1.CreateTargetRequest, v1.CreateTargetResponse]
	updateTarget  *connect_go.Client[v1.UpdateTargetRequest, v1.UpdateTargetResponse]
	deleteTarget  *connect_go.Client[v1.DeleteTargetRequest, v1.DeleteTargetResponse]
}

// GetAllTargets calls uptime_dash.v1.UptimeService.GetAllTargets.
func (c *uptimeServiceClient) GetAllTargets(ctx context.Context, req *connect_go.Request[v1.GetAllTargetsRequest]) (*connect_go.Response[v1.GetAllTargetsResponse], error) {
	return c.getAllTargets.CallUnary(ctx, req)
}

// GetTarget calls uptime_dash.v1.UptimeService.GetTarget.
func (c *uptimeServiceClient) GetTarget(ctx context.Context, req *connect_go.Request[v1.GetTargetRequest]) (*connect_go.Response[v1.GetTargetResponse], error) {
	return c.getTarget.CallUnary(ctx, req)
}

// CreateTarget calls uptime_dash.v1.UptimeService.CreateTarget.
func (c *uptimeServiceClient) CreateTarget(ctx context.Context, req *connect_go.Request[v1.CreateTargetRequest]) (*connect_go.Response[v1.CreateTargetResponse], error) {
	return c.createTarget.CallUnary(ctx, req)
}

// UpdateTarget calls uptime_dash.v1.UptimeService.UpdateTarget.
func (c *uptimeServiceClient) UpdateTarget(ctx context.Context, req *connect_go.Request[v1.UpdateTargetRequest]) (*connect_go.Response[v1.UpdateTargetResponse], error) {
	return c.updateTarget.CallUnary(ctx, req)
}

// DeleteTarget calls uptime_dash.v1.UptimeService.DeleteTarget.
func (c *uptimeServiceClient) DeleteTarget(ctx context.Context, req *connect_go.Request[v1.DeleteTargetRequest]) (*connect_go.Response[v1.DeleteTargetResponse], error) {
	return c.deleteTarget.CallUnary(ctx, req)
}

// UptimeServiceHandler is an implementation of the uptime_dash.v1.UptimeService service.
type UptimeServiceHandler interface {
	GetAllTargets(context.Context, *connect_go.Request[v1.GetAllTargetsRequest]) (*connect_go.Response[v1.GetAllTargetsResponse], error)
	GetTarget(context.Context, *connect_go.Request[v1.GetTargetRequest]) (*connect_go.Response[v1.GetTargetResponse], error)
	CreateTarget(context.Context, *connect_go.Request[v1.CreateTargetRequest]) (*connect_go.Response[v1.CreateTargetResponse], error)
	UpdateTarget(context.Context, *connect_go.Request[v1.UpdateTargetRequest]) (*connect_go.Response[v1.UpdateTargetResponse], error)
	DeleteTarget(context.Context, *connect_go.Request[v1.DeleteTargetRequest]) (*connect_go.Response[v1.DeleteTargetResponse], error)
}

// NewUptimeServiceHandler builds an HTTP handler from the service implementation. It returns the
// path on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewUptimeServiceHandler(svc UptimeServiceHandler, opts ...connect_go.HandlerOption) (string, http.Handler) {
	mux := http.NewServeMux()
	mux.Handle("/uptime_dash.v1.UptimeService/GetAllTargets", connect_go.NewUnaryHandler(
		"/uptime_dash.v1.UptimeService/GetAllTargets",
		svc.GetAllTargets,
		opts...,
	))
	mux.Handle("/uptime_dash.v1.UptimeService/GetTarget", connect_go.NewUnaryHandler(
		"/uptime_dash.v1.UptimeService/GetTarget",
		svc.GetTarget,
		opts...,
	))
	mux.Handle("/uptime_dash.v1.UptimeService/CreateTarget", connect_go.NewUnaryHandler(
		"/uptime_dash.v1.UptimeService/CreateTarget",
		svc.CreateTarget,
		opts...,
	))
	mux.Handle("/uptime_dash.v1.UptimeService/UpdateTarget", connect_go.NewUnaryHandler(
		"/uptime_dash.v1.UptimeService/UpdateTarget",
		svc.UpdateTarget,
		opts...,
	))
	mux.Handle("/uptime_dash.v1.UptimeService/DeleteTarget", connect_go.NewUnaryHandler(
		"/uptime_dash.v1.UptimeService/DeleteTarget",
		svc.DeleteTarget,
		opts...,
	))
	return "/uptime_dash.v1.UptimeService/", mux
}

// UnimplementedUptimeServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedUptimeServiceHandler struct{}

func (UnimplementedUptimeServiceHandler) GetAllTargets(context.Context, *connect_go.Request[v1.GetAllTargetsRequest]) (*connect_go.Response[v1.GetAllTargetsResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("uptime_dash.v1.UptimeService.GetAllTargets is not implemented"))
}

func (UnimplementedUptimeServiceHandler) GetTarget(context.Context, *connect_go.Request[v1.GetTargetRequest]) (*connect_go.Response[v1.GetTargetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("uptime_dash.v1.UptimeService.GetTarget is not implemented"))
}

func (UnimplementedUptimeServiceHandler) CreateTarget(context.Context, *connect_go.Request[v1.CreateTargetRequest]) (*connect_go.Response[v1.CreateTargetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("uptime_dash.v1.UptimeService.CreateTarget is not implemented"))
}

func (UnimplementedUptimeServiceHandler) UpdateTarget(context.Context, *connect_go.Request[v1.UpdateTargetRequest]) (*connect_go.Response[v1.UpdateTargetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("uptime_dash.v1.UptimeService.UpdateTarget is not implemented"))
}

func (UnimplementedUptimeServiceHandler) DeleteTarget(context.Context, *connect_go.Request[v1.DeleteTargetRequest]) (*connect_go.Response[v1.DeleteTargetResponse], error) {
	return nil, connect_go.NewError(connect_go.CodeUnimplemented, errors.New("uptime_dash.v1.UptimeService.DeleteTarget is not implemented"))
}
