// Code generated by ent, DO NOT EDIT.

package target

import (
	"main/ent/predicate"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// IntervalSeconds applies equality check predicate on the "interval_seconds" field. It's identical to IntervalSecondsEQ.
func IntervalSeconds(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntervalSeconds), v))
	})
}

// TimeoutSeconds applies equality check predicate on the "timeout_seconds" field. It's identical to TimeoutSecondsEQ.
func TimeoutSeconds(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeoutSeconds), v))
	})
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostname), v))
	})
}

// Port applies equality check predicate on the "port" field. It's identical to PortEQ.
func Port(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPort), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Target {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Target {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldType), v))
	})
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldType), v))
	})
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Target {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldType), v...))
	})
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Target {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldType), v...))
	})
}

// IntervalSecondsEQ applies the EQ predicate on the "interval_seconds" field.
func IntervalSecondsEQ(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIntervalSeconds), v))
	})
}

// IntervalSecondsNEQ applies the NEQ predicate on the "interval_seconds" field.
func IntervalSecondsNEQ(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIntervalSeconds), v))
	})
}

// IntervalSecondsIn applies the In predicate on the "interval_seconds" field.
func IntervalSecondsIn(vs ...uint32) predicate.Target {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIntervalSeconds), v...))
	})
}

// IntervalSecondsNotIn applies the NotIn predicate on the "interval_seconds" field.
func IntervalSecondsNotIn(vs ...uint32) predicate.Target {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIntervalSeconds), v...))
	})
}

// IntervalSecondsGT applies the GT predicate on the "interval_seconds" field.
func IntervalSecondsGT(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIntervalSeconds), v))
	})
}

// IntervalSecondsGTE applies the GTE predicate on the "interval_seconds" field.
func IntervalSecondsGTE(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIntervalSeconds), v))
	})
}

// IntervalSecondsLT applies the LT predicate on the "interval_seconds" field.
func IntervalSecondsLT(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIntervalSeconds), v))
	})
}

// IntervalSecondsLTE applies the LTE predicate on the "interval_seconds" field.
func IntervalSecondsLTE(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIntervalSeconds), v))
	})
}

// TimeoutSecondsEQ applies the EQ predicate on the "timeout_seconds" field.
func TimeoutSecondsEQ(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTimeoutSeconds), v))
	})
}

// TimeoutSecondsNEQ applies the NEQ predicate on the "timeout_seconds" field.
func TimeoutSecondsNEQ(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTimeoutSeconds), v))
	})
}

// TimeoutSecondsIn applies the In predicate on the "timeout_seconds" field.
func TimeoutSecondsIn(vs ...uint32) predicate.Target {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTimeoutSeconds), v...))
	})
}

// TimeoutSecondsNotIn applies the NotIn predicate on the "timeout_seconds" field.
func TimeoutSecondsNotIn(vs ...uint32) predicate.Target {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTimeoutSeconds), v...))
	})
}

// TimeoutSecondsGT applies the GT predicate on the "timeout_seconds" field.
func TimeoutSecondsGT(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTimeoutSeconds), v))
	})
}

// TimeoutSecondsGTE applies the GTE predicate on the "timeout_seconds" field.
func TimeoutSecondsGTE(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTimeoutSeconds), v))
	})
}

// TimeoutSecondsLT applies the LT predicate on the "timeout_seconds" field.
func TimeoutSecondsLT(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTimeoutSeconds), v))
	})
}

// TimeoutSecondsLTE applies the LTE predicate on the "timeout_seconds" field.
func TimeoutSecondsLTE(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTimeoutSeconds), v))
	})
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldURL), v))
	})
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldURL), v))
	})
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.Target {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldURL), v...))
	})
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.Target {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldURL), v...))
	})
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldURL), v))
	})
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldURL), v))
	})
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldURL), v))
	})
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldURL), v))
	})
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldURL), v))
	})
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldURL), v))
	})
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldURL), v))
	})
}

// URLIsNil applies the IsNil predicate on the "url" field.
func URLIsNil() predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldURL)))
	})
}

// URLNotNil applies the NotNil predicate on the "url" field.
func URLNotNil() predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldURL)))
	})
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldURL), v))
	})
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldURL), v))
	})
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldHostname), v))
	})
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldHostname), v))
	})
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.Target {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldHostname), v...))
	})
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.Target {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldHostname), v...))
	})
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldHostname), v))
	})
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldHostname), v))
	})
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldHostname), v))
	})
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldHostname), v))
	})
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldHostname), v))
	})
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldHostname), v))
	})
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldHostname), v))
	})
}

// HostnameIsNil applies the IsNil predicate on the "hostname" field.
func HostnameIsNil() predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldHostname)))
	})
}

// HostnameNotNil applies the NotNil predicate on the "hostname" field.
func HostnameNotNil() predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldHostname)))
	})
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldHostname), v))
	})
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldHostname), v))
	})
}

// PortEQ applies the EQ predicate on the "port" field.
func PortEQ(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPort), v))
	})
}

// PortNEQ applies the NEQ predicate on the "port" field.
func PortNEQ(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPort), v))
	})
}

// PortIn applies the In predicate on the "port" field.
func PortIn(vs ...uint32) predicate.Target {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPort), v...))
	})
}

// PortNotIn applies the NotIn predicate on the "port" field.
func PortNotIn(vs ...uint32) predicate.Target {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPort), v...))
	})
}

// PortGT applies the GT predicate on the "port" field.
func PortGT(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPort), v))
	})
}

// PortGTE applies the GTE predicate on the "port" field.
func PortGTE(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPort), v))
	})
}

// PortLT applies the LT predicate on the "port" field.
func PortLT(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPort), v))
	})
}

// PortLTE applies the LTE predicate on the "port" field.
func PortLTE(v uint32) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPort), v))
	})
}

// PortIsNil applies the IsNil predicate on the "port" field.
func PortIsNil() predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPort)))
	})
}

// PortNotNil applies the NotNil predicate on the "port" field.
func PortNotNil() predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPort)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Target) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Target) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Target) predicate.Target {
	return predicate.Target(func(s *sql.Selector) {
		p(s.Not())
	})
}
