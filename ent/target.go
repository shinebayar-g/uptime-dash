// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"main/ent/target"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
)

// Target is the model entity for the Target schema.
type Target struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type target.Type `json:"type,omitempty"`
	// IntervalSeconds holds the value of the "interval_seconds" field.
	IntervalSeconds uint32 `json:"interval_seconds,omitempty"`
	// TimeoutSeconds holds the value of the "timeout_seconds" field.
	TimeoutSeconds uint32 `json:"timeout_seconds,omitempty"`
	// URL holds the value of the "url" field.
	URL *string `json:"url,omitempty"`
	// Hostname holds the value of the "hostname" field.
	Hostname *string `json:"hostname,omitempty"`
	// Port holds the value of the "port" field.
	Port *uint32 `json:"port,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Target) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case target.FieldIntervalSeconds, target.FieldTimeoutSeconds, target.FieldPort:
			values[i] = new(sql.NullInt64)
		case target.FieldName, target.FieldType, target.FieldURL, target.FieldHostname:
			values[i] = new(sql.NullString)
		case target.FieldID:
			values[i] = new(uuid.UUID)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Target", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Target fields.
func (t *Target) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case target.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				t.ID = *value
			}
		case target.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case target.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = target.Type(value.String)
			}
		case target.FieldIntervalSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field interval_seconds", values[i])
			} else if value.Valid {
				t.IntervalSeconds = uint32(value.Int64)
			}
		case target.FieldTimeoutSeconds:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field timeout_seconds", values[i])
			} else if value.Valid {
				t.TimeoutSeconds = uint32(value.Int64)
			}
		case target.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				t.URL = new(string)
				*t.URL = value.String
			}
		case target.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				t.Hostname = new(string)
				*t.Hostname = value.String
			}
		case target.FieldPort:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field port", values[i])
			} else if value.Valid {
				t.Port = new(uint32)
				*t.Port = uint32(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Target.
// Note that you need to call Target.Unwrap() before calling this method if this Target
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Target) Update() *TargetUpdateOne {
	return (&TargetClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Target entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Target) Unwrap() *Target {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Target is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Target) String() string {
	var builder strings.Builder
	builder.WriteString("Target(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", t.Type))
	builder.WriteString(", ")
	builder.WriteString("interval_seconds=")
	builder.WriteString(fmt.Sprintf("%v", t.IntervalSeconds))
	builder.WriteString(", ")
	builder.WriteString("timeout_seconds=")
	builder.WriteString(fmt.Sprintf("%v", t.TimeoutSeconds))
	builder.WriteString(", ")
	if v := t.URL; v != nil {
		builder.WriteString("url=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.Hostname; v != nil {
		builder.WriteString("hostname=")
		builder.WriteString(*v)
	}
	builder.WriteString(", ")
	if v := t.Port; v != nil {
		builder.WriteString("port=")
		builder.WriteString(fmt.Sprintf("%v", *v))
	}
	builder.WriteByte(')')
	return builder.String()
}

// Targets is a parsable slice of Target.
type Targets []*Target

func (t Targets) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
