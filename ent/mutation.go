// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"main/ent/predicate"
	"main/ent/target"
	"sync"

	"github.com/google/uuid"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeTarget = "Target"
)

// TargetMutation represents an operation that mutates the Target nodes in the graph.
type TargetMutation struct {
	config
	op                  Op
	typ                 string
	id                  *uuid.UUID
	name                *string
	_type               *target.Type
	interval_seconds    *uint32
	addinterval_seconds *int32
	timeout_seconds     *uint32
	addtimeout_seconds  *int32
	url                 *string
	hostname            *string
	port                *uint32
	addport             *int32
	clearedFields       map[string]struct{}
	done                bool
	oldValue            func(context.Context) (*Target, error)
	predicates          []predicate.Target
}

var _ ent.Mutation = (*TargetMutation)(nil)

// targetOption allows management of the mutation configuration using functional options.
type targetOption func(*TargetMutation)

// newTargetMutation creates new mutation for the Target entity.
func newTargetMutation(c config, op Op, opts ...targetOption) *TargetMutation {
	m := &TargetMutation{
		config:        c,
		op:            op,
		typ:           TypeTarget,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTargetID sets the ID field of the mutation.
func withTargetID(id uuid.UUID) targetOption {
	return func(m *TargetMutation) {
		var (
			err   error
			once  sync.Once
			value *Target
		)
		m.oldValue = func(ctx context.Context) (*Target, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Target.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTarget sets the old Target of the mutation.
func withTarget(node *Target) targetOption {
	return func(m *TargetMutation) {
		m.oldValue = func(context.Context) (*Target, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TargetMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TargetMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Target entities.
func (m *TargetMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TargetMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TargetMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Target.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *TargetMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *TargetMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Target entity.
// If the Target object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *TargetMutation) ResetName() {
	m.name = nil
}

// SetType sets the "type" field.
func (m *TargetMutation) SetType(t target.Type) {
	m._type = &t
}

// GetType returns the value of the "type" field in the mutation.
func (m *TargetMutation) GetType() (r target.Type, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Target entity.
// If the Target object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetMutation) OldType(ctx context.Context) (v target.Type, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *TargetMutation) ResetType() {
	m._type = nil
}

// SetIntervalSeconds sets the "interval_seconds" field.
func (m *TargetMutation) SetIntervalSeconds(u uint32) {
	m.interval_seconds = &u
	m.addinterval_seconds = nil
}

// IntervalSeconds returns the value of the "interval_seconds" field in the mutation.
func (m *TargetMutation) IntervalSeconds() (r uint32, exists bool) {
	v := m.interval_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldIntervalSeconds returns the old "interval_seconds" field's value of the Target entity.
// If the Target object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetMutation) OldIntervalSeconds(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIntervalSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIntervalSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldIntervalSeconds: %w", err)
	}
	return oldValue.IntervalSeconds, nil
}

// AddIntervalSeconds adds u to the "interval_seconds" field.
func (m *TargetMutation) AddIntervalSeconds(u int32) {
	if m.addinterval_seconds != nil {
		*m.addinterval_seconds += u
	} else {
		m.addinterval_seconds = &u
	}
}

// AddedIntervalSeconds returns the value that was added to the "interval_seconds" field in this mutation.
func (m *TargetMutation) AddedIntervalSeconds() (r int32, exists bool) {
	v := m.addinterval_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ResetIntervalSeconds resets all changes to the "interval_seconds" field.
func (m *TargetMutation) ResetIntervalSeconds() {
	m.interval_seconds = nil
	m.addinterval_seconds = nil
}

// SetTimeoutSeconds sets the "timeout_seconds" field.
func (m *TargetMutation) SetTimeoutSeconds(u uint32) {
	m.timeout_seconds = &u
	m.addtimeout_seconds = nil
}

// TimeoutSeconds returns the value of the "timeout_seconds" field in the mutation.
func (m *TargetMutation) TimeoutSeconds() (r uint32, exists bool) {
	v := m.timeout_seconds
	if v == nil {
		return
	}
	return *v, true
}

// OldTimeoutSeconds returns the old "timeout_seconds" field's value of the Target entity.
// If the Target object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetMutation) OldTimeoutSeconds(ctx context.Context) (v uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTimeoutSeconds is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTimeoutSeconds requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTimeoutSeconds: %w", err)
	}
	return oldValue.TimeoutSeconds, nil
}

// AddTimeoutSeconds adds u to the "timeout_seconds" field.
func (m *TargetMutation) AddTimeoutSeconds(u int32) {
	if m.addtimeout_seconds != nil {
		*m.addtimeout_seconds += u
	} else {
		m.addtimeout_seconds = &u
	}
}

// AddedTimeoutSeconds returns the value that was added to the "timeout_seconds" field in this mutation.
func (m *TargetMutation) AddedTimeoutSeconds() (r int32, exists bool) {
	v := m.addtimeout_seconds
	if v == nil {
		return
	}
	return *v, true
}

// ResetTimeoutSeconds resets all changes to the "timeout_seconds" field.
func (m *TargetMutation) ResetTimeoutSeconds() {
	m.timeout_seconds = nil
	m.addtimeout_seconds = nil
}

// SetURL sets the "url" field.
func (m *TargetMutation) SetURL(s string) {
	m.url = &s
}

// URL returns the value of the "url" field in the mutation.
func (m *TargetMutation) URL() (r string, exists bool) {
	v := m.url
	if v == nil {
		return
	}
	return *v, true
}

// OldURL returns the old "url" field's value of the Target entity.
// If the Target object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetMutation) OldURL(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldURL: %w", err)
	}
	return oldValue.URL, nil
}

// ClearURL clears the value of the "url" field.
func (m *TargetMutation) ClearURL() {
	m.url = nil
	m.clearedFields[target.FieldURL] = struct{}{}
}

// URLCleared returns if the "url" field was cleared in this mutation.
func (m *TargetMutation) URLCleared() bool {
	_, ok := m.clearedFields[target.FieldURL]
	return ok
}

// ResetURL resets all changes to the "url" field.
func (m *TargetMutation) ResetURL() {
	m.url = nil
	delete(m.clearedFields, target.FieldURL)
}

// SetHostname sets the "hostname" field.
func (m *TargetMutation) SetHostname(s string) {
	m.hostname = &s
}

// Hostname returns the value of the "hostname" field in the mutation.
func (m *TargetMutation) Hostname() (r string, exists bool) {
	v := m.hostname
	if v == nil {
		return
	}
	return *v, true
}

// OldHostname returns the old "hostname" field's value of the Target entity.
// If the Target object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetMutation) OldHostname(ctx context.Context) (v *string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldHostname is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldHostname requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldHostname: %w", err)
	}
	return oldValue.Hostname, nil
}

// ClearHostname clears the value of the "hostname" field.
func (m *TargetMutation) ClearHostname() {
	m.hostname = nil
	m.clearedFields[target.FieldHostname] = struct{}{}
}

// HostnameCleared returns if the "hostname" field was cleared in this mutation.
func (m *TargetMutation) HostnameCleared() bool {
	_, ok := m.clearedFields[target.FieldHostname]
	return ok
}

// ResetHostname resets all changes to the "hostname" field.
func (m *TargetMutation) ResetHostname() {
	m.hostname = nil
	delete(m.clearedFields, target.FieldHostname)
}

// SetPort sets the "port" field.
func (m *TargetMutation) SetPort(u uint32) {
	m.port = &u
	m.addport = nil
}

// Port returns the value of the "port" field in the mutation.
func (m *TargetMutation) Port() (r uint32, exists bool) {
	v := m.port
	if v == nil {
		return
	}
	return *v, true
}

// OldPort returns the old "port" field's value of the Target entity.
// If the Target object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TargetMutation) OldPort(ctx context.Context) (v *uint32, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPort is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPort requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPort: %w", err)
	}
	return oldValue.Port, nil
}

// AddPort adds u to the "port" field.
func (m *TargetMutation) AddPort(u int32) {
	if m.addport != nil {
		*m.addport += u
	} else {
		m.addport = &u
	}
}

// AddedPort returns the value that was added to the "port" field in this mutation.
func (m *TargetMutation) AddedPort() (r int32, exists bool) {
	v := m.addport
	if v == nil {
		return
	}
	return *v, true
}

// ClearPort clears the value of the "port" field.
func (m *TargetMutation) ClearPort() {
	m.port = nil
	m.addport = nil
	m.clearedFields[target.FieldPort] = struct{}{}
}

// PortCleared returns if the "port" field was cleared in this mutation.
func (m *TargetMutation) PortCleared() bool {
	_, ok := m.clearedFields[target.FieldPort]
	return ok
}

// ResetPort resets all changes to the "port" field.
func (m *TargetMutation) ResetPort() {
	m.port = nil
	m.addport = nil
	delete(m.clearedFields, target.FieldPort)
}

// Where appends a list predicates to the TargetMutation builder.
func (m *TargetMutation) Where(ps ...predicate.Target) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TargetMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Target).
func (m *TargetMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TargetMutation) Fields() []string {
	fields := make([]string, 0, 7)
	if m.name != nil {
		fields = append(fields, target.FieldName)
	}
	if m._type != nil {
		fields = append(fields, target.FieldType)
	}
	if m.interval_seconds != nil {
		fields = append(fields, target.FieldIntervalSeconds)
	}
	if m.timeout_seconds != nil {
		fields = append(fields, target.FieldTimeoutSeconds)
	}
	if m.url != nil {
		fields = append(fields, target.FieldURL)
	}
	if m.hostname != nil {
		fields = append(fields, target.FieldHostname)
	}
	if m.port != nil {
		fields = append(fields, target.FieldPort)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TargetMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case target.FieldName:
		return m.Name()
	case target.FieldType:
		return m.GetType()
	case target.FieldIntervalSeconds:
		return m.IntervalSeconds()
	case target.FieldTimeoutSeconds:
		return m.TimeoutSeconds()
	case target.FieldURL:
		return m.URL()
	case target.FieldHostname:
		return m.Hostname()
	case target.FieldPort:
		return m.Port()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TargetMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case target.FieldName:
		return m.OldName(ctx)
	case target.FieldType:
		return m.OldType(ctx)
	case target.FieldIntervalSeconds:
		return m.OldIntervalSeconds(ctx)
	case target.FieldTimeoutSeconds:
		return m.OldTimeoutSeconds(ctx)
	case target.FieldURL:
		return m.OldURL(ctx)
	case target.FieldHostname:
		return m.OldHostname(ctx)
	case target.FieldPort:
		return m.OldPort(ctx)
	}
	return nil, fmt.Errorf("unknown Target field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TargetMutation) SetField(name string, value ent.Value) error {
	switch name {
	case target.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case target.FieldType:
		v, ok := value.(target.Type)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case target.FieldIntervalSeconds:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetIntervalSeconds(v)
		return nil
	case target.FieldTimeoutSeconds:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTimeoutSeconds(v)
		return nil
	case target.FieldURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetURL(v)
		return nil
	case target.FieldHostname:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetHostname(v)
		return nil
	case target.FieldPort:
		v, ok := value.(uint32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPort(v)
		return nil
	}
	return fmt.Errorf("unknown Target field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TargetMutation) AddedFields() []string {
	var fields []string
	if m.addinterval_seconds != nil {
		fields = append(fields, target.FieldIntervalSeconds)
	}
	if m.addtimeout_seconds != nil {
		fields = append(fields, target.FieldTimeoutSeconds)
	}
	if m.addport != nil {
		fields = append(fields, target.FieldPort)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TargetMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case target.FieldIntervalSeconds:
		return m.AddedIntervalSeconds()
	case target.FieldTimeoutSeconds:
		return m.AddedTimeoutSeconds()
	case target.FieldPort:
		return m.AddedPort()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TargetMutation) AddField(name string, value ent.Value) error {
	switch name {
	case target.FieldIntervalSeconds:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddIntervalSeconds(v)
		return nil
	case target.FieldTimeoutSeconds:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddTimeoutSeconds(v)
		return nil
	case target.FieldPort:
		v, ok := value.(int32)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPort(v)
		return nil
	}
	return fmt.Errorf("unknown Target numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TargetMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(target.FieldURL) {
		fields = append(fields, target.FieldURL)
	}
	if m.FieldCleared(target.FieldHostname) {
		fields = append(fields, target.FieldHostname)
	}
	if m.FieldCleared(target.FieldPort) {
		fields = append(fields, target.FieldPort)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TargetMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TargetMutation) ClearField(name string) error {
	switch name {
	case target.FieldURL:
		m.ClearURL()
		return nil
	case target.FieldHostname:
		m.ClearHostname()
		return nil
	case target.FieldPort:
		m.ClearPort()
		return nil
	}
	return fmt.Errorf("unknown Target nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TargetMutation) ResetField(name string) error {
	switch name {
	case target.FieldName:
		m.ResetName()
		return nil
	case target.FieldType:
		m.ResetType()
		return nil
	case target.FieldIntervalSeconds:
		m.ResetIntervalSeconds()
		return nil
	case target.FieldTimeoutSeconds:
		m.ResetTimeoutSeconds()
		return nil
	case target.FieldURL:
		m.ResetURL()
		return nil
	case target.FieldHostname:
		m.ResetHostname()
		return nil
	case target.FieldPort:
		m.ResetPort()
		return nil
	}
	return fmt.Errorf("unknown Target field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TargetMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TargetMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TargetMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TargetMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TargetMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TargetMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TargetMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Target unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TargetMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Target edge %s", name)
}
